#version 460 core

layout(push_constant) uniform uConstantBlock
{
    mat4 view;
    mat4 proj;
    float worldTime;
    float deltaTime;
} uConstants;

struct GrassInstanceData
{
    vec3 position;  // Absolute position of blade grass base
    vec2 uv;        // Texture coordinates for grass blade texture sampling
};

layout(std140, set = 0, binding = 0) buffer InstanceDataBlock
{
    GrassInstanceData data[];
} uInstances;

layout(std140, set = 0, binding = 1) uniform UniformBlock
{
    float terrainSize;
    float grassDensity;
    //vec2 windDirection;
    float windAngle;
    float windStrength;
} uUniforms;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

float random(vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

void main()
{
    uint grassInstanceCount = uint(uUniforms.grassDensity * uUniforms.terrainSize * uUniforms.terrainSize);
    // bladesPerSide x bladesPerSide total blades
    uint bladesPerSide = uint(sqrt(grassInstanceCount));
    float spacingPerBlade = float(uUniforms.terrainSize) / float(bladesPerSide);

    uint gridX = gl_GlobalInvocationID.x;
    uint gridY = gl_GlobalInvocationID.y;
    uint iid = gridX * bladesPerSide + gridY;

    vec2 bladeUV = vec2(
            float(gridX) / float(bladesPerSide),
            float(gridY) / float(bladesPerSide));

    vec3 bladePosition = vec3(
            bladeUV.x * uUniforms.terrainSize + random(vec2(bladeUV.xy)) * spacingPerBlade,
            0,
            bladeUV.y * uUniforms.terrainSize + random(vec2(bladeUV.yx)) * spacingPerBlade);
    uInstances.data[iid].position = bladePosition;
    uInstances.data[iid].uv = bladeUV;
}
